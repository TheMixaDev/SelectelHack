import { authScene, donateScece, menuScene, profileScene } from "./bot.js";
import { message } from 'telegraf/filters';
import HashStringWithString from "./hash.js";
import config from 'config';
import { MenuKeys, ProfileKeys } from "./keyboards.js";
import { getUserToken, isUserAuthorized } from "./redis.js";
import { GetDonations } from "./http.js";

function init() {
    authScene.enter(async (ctx) => {
        let hash = HashStringWithString(ctx.message.from.id, config.get('bot.secret'));
        const res = await isUserAuthorized(hash, ctx.message.from.id);

        if (res) {
            return ctx.scene.enter('menuScene');
        }

        return ctx.reply('–ü—Ä–∏–≤–µ—Ç! –Ø DonorSearchBot. –Ø –≤–∏–∂—É –≤–∞—Å –≤–ø–µ—Ä–≤—ã–µ. –ñ–µ–ª–∞–µ—Ç–µ –≤–æ–π—Ç–∏ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è?', {
            reply_markup: {
                keyboard: [
                    [
                        { text: '–í—Ö–æ–¥', web_app: { url: `${config.get('network.webapp')}?path=auth&hash=${hash}&id=${ctx.message.from.id}&time=${new Date().getTime()}` } },
                        { text: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', web_app: { url: `${config.get('network.webapp')}?path=register&hash=${hash}&id=${ctx.message.from.id}&time=${new Date().getTime()}` } }
                    ]
                ],
                resize_keyboard: true,
            }
        });
    });


    authScene.on(message('text'), async (ctx) => {
        const hash = HashStringWithString(ctx.message.from.id, config.get('bot.secret'));
        await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –æ–¥–Ω–æ–π –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ', {
            reply_markup: {
                keyboard: [
                    [
                        { text: '–í—Ö–æ–¥', web_app: { url: `${config.get('network.webapp')}?path=auth&hash=${hash}&id=${ctx.message.from.id}&time=${new Date().getTime()}` } },
                        { text: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', web_app: { url: `${config.get('network.webapp')}?path=register&hash=${hash}&id=${ctx.message.from.id}&time=${new Date().getTime()}` } }
                    ]
                ],
                resize_keyboard: true,
            }

        });
    });



    menuScene.enter(async (ctx) => {
        return ctx.reply('–ß–µ–º –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω?', {
            reply_markup: {
                keyboard: [
                    [
                        { text: 'ü©∏ –°–¥–∞—á–∞ –∫—Ä–æ–≤–∏' },
                        { text: 'üóìÔ∏è –°–æ–±—ã—Ç–∏—è' },
                    ],
                    [{ text: 'üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å' }],
                    [{ text: 'üìñ –ü–∞–º—è—Ç–∫–∞ –∫ —Å–¥–∞—á–µ –∫—Ä–æ–≤–∏', web_app: { url: `https://donorsearch.org/how/`}},],
                    [{ text: '‚ù§Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç' }] // todo: donation
                ],
                resize_keyboard: true,
            }
        });

    });

    menuScene.on(message('text'), async (ctx) => {
        switch (ctx.message.text) {
            case MenuKeys[0][0]: return ctx.scene.enter('donateScene');
            case MenuKeys[0][1]: return ctx.scene.enter('eventScene');
            case MenuKeys[1][0]: return ctx.scene.enter('profileScene');
            case MenuKeys[2][0]: return
            case MenuKeys[3][0]: return ctx.reply('Donate');
            default: return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –æ–¥–Ω–æ–π –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ', {
                reply_markup: {
                    keyboard: MenuKeys,
                    resize_keyboard: true,
                    one_time_keyboard: true,
                }
            });
        }
    });

    donateScece.enter(async (ctx) => {
        const id = ctx.message.from.id
        const hash = HashStringWithString(id - 0, config.get('bot.secret'));
        const token = await getUserToken(hash);
        return ctx.reply('–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?', {
            reply_markup: {
                keyboard: [
                    [
                        { text: '‚ûï –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–¥–∞—á—É', web_app: { url: `${config.get('network.webapp')}?path=donation/create&hash=${hash}&token=${token}&id=${ctx.message.from.id}&time=${new Date().getTime()}` } },
                    ],
                    [
                        { text: 'üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–¥–∞—á—É –∫—Ä–æ–≤–∏', web_app: { url: `${config.get('network.webapp')}?path=donation/plan&token=${token}&hash=${hash}&id=${ctx.message.from.id}&time=${new Date().getTime()}` } },
                    ],
                    [
                        { text: 'üìç –ì–¥–µ –Ω—É–∂–Ω–∞ –º–æ—è –≥—Ä—É–ø–ø–∞ –∫—Ä–æ–≤–∏', web_app: { url: `${config.get('network.webapp')}?path=stations&token=${token}&hash=${hash}&id=${ctx.message.from.id}&time=${new Date().getTime()}` } },
                    ],
                    [
                        { text: 'üö™ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', }
                    ]
                ],
                resize_keyboard: true,
                one_time_keyboard: true
            }
        });
    });


    donateScece.on(message('text'), async (ctx) => {
        switch (ctx.message.text) {
            case 'üö™ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é': return ctx.scene.enter('menuScene');
            default: return ctx.reply('–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –æ–¥–Ω–æ–π –∏–∑ –∫–Ω–æ–ø–æ–∫ üëá');
        }
    });


    profileScene.enter(async (ctx) => {
        return ctx.reply('–ü—Ä–æ—Ñ–∏–ª—å', {
            reply_markup: {
                keyboard: ProfileKeys,
                resize_keyboard: true,
                one_time_keyboard: true
            }
        });
    })

    profileScene.on(message('text'), async (ctx) => {
        switch (ctx.message.text) {
            case ProfileKeys[0][0]: return ctx.reply('1000');
            case ProfileKeys[0][1]: return ctx.reply('top 1');
            case ProfileKeys[1][0]: return ctx.reply('–°–∫–æ—Ä–æ');
            case ProfileKeys[2][0]:
                const hash = HashStringWithString(ctx.message.from.id, config.get('bot.secret'));
                const res = await GetDonations(hash, 1, 99)
                if (res.status == 200) {
                    // todo: parse donations
                    return ctx.reply(`–í–∞—à–∏ –¥–æ–Ω–∞—Ü–∏–∏:\n${JSON.stringify(res.data)}`);
                }
                return ctx.reply("üò¢ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ–Ω–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
            case ProfileKeys[3][0]: return ctx.scene.enter('menuScene');
            default: return ctx.reply('–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –æ–¥–Ω–æ–π –∏–∑ –∫–Ω–æ–ø–æ–∫ üëá');
        }
    });
}

export default init;