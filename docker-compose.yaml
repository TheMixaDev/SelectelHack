services:
  backend-api:
    build: ./backend
    container_name: backend-api
    ports:
      - '3033:3033'
    environment:
      - PRODUCTION=false
      - PORT=3033
    # depends_on:
      # database:
        # condition: service_healthy
    restart: on-failure:3

  # It could instead, use volume-mounts.
  prometheus:
    build: './monitoring/prometheus'
    container_name: 'prometheus'
    ports:
      - '9090:9090'

  # This could instead be a volume-mounted container.
  grafana:
    build: './monitoring/grafana'
    container_name: 'grafana'
    ports:
      - '3000:3000'

  crdb:
   container_name: crdb
   image: cockroachdb/cockroach:latest
   ports:
     - "26257:26257"
     - "8080:8080"
   command: start-single-node --insecure
   volumes:
     - "./persistence/cockroach/:/cockroach/cockroach-data"
  redis:
    container_name: redis
    image: redis:latest
    ports:
      - 6379:6379
    environment:
      - REDIS_PASSWORD=rdpwd
      - REDIS_PORT=6379
      - REDIS_DATABASES=16
    volumes:
      - ./persistence/redis/:/data
    restart: on-failure:3
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
  minio:
    container_name: minio
    image: minio/minio
    ports:
      - "9000:9000" # GUI
      - "9001:9001" # CLI
    volumes:
      - ./persistence/minio/:/data
    environment:
      MINIO_ROOT_USER: mnusr
      MINIO_ROOT_PASSWORD: Strong#Pass#2024
    command: server --console-address ":9001" /data
    restart: on-failure:3
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-f",
          "http://minio:9000/minio/health/ready"
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
  # nginx:
  #   container_name: nginx
  #   build: ./frontend
  #   ports:
  #     - '80:80'